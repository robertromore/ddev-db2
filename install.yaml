# Details about the install.yaml file are at https://ddev.readthedocs.io/en/latest/users/extend/additional-services/#sections-and-features-of-ddev-get-add-on-installyaml

name: ddev-db2

# pre_install_actions - list of actions to run before installing the addon.
# Examples would be removing an extraneous docker volume,
# or doing a sanity check for requirements.
# DDEV environment variables can be interpolated into these actions
pre_install_actions:
- |
  #ddev-nodisplay
  #ddev-description:Check architecture type for incompatible arm64 type
  if [ "$(arch)" = "arm64" -o "$(arch)" = "aarch64" ]; then
    echo "This package does not work on arm64 machines";
    exit 1;
  fi
- |
  # If there was an existing .ddev/web-build/Dockerfile.db2 we need to remove it
  #ddev-nodisplay
  #ddev-description:Check for existing Dockerfile.db2
  if [ -f .ddev/web-build/Dockerfile.db2 ]; then
    if grep "#ddev-generated" .ddev/web-build/Dockerfile.db2; then
      echo "Removing Dockerfile.db2 from previous version of this add-on"
      rm .ddev/web-build/Dockerfile.db2
    else 
      echo "Dockerfile.db2 needs to be removed but has been modified by the user. Please check it and remove it"
      exit 2;
    fi
  fi

# list of files and directories listed that are copied into project .ddev directory
# Each file should contain #ddev-generated so it can be replaced by a later `ddev get`
# if it hasn't been modified by the user.
# DDEV environment variables can be interpolated into these filenames
project_files:
- docker-compose.db2.yaml
- web-build/pre.Dockerfile.db2
- config.db2.yaml

# List of files and directories that are copied into the global .ddev directory
# DDEV environment variables can be interpolated into these filenames
global_files:

# DDEV environment variables can be interpolated into these actions
post_install_actions:
- |
  #ddev-nodisplay
  if [ -f .ddev/.env ] && ! grep '#ddev-generated' .ddev/.env; then
    echo "Existing .ddev/.env does not have #ddev-generated, so it can't be updated"
    exit 2
  fi
- |
  #ddev-nodisplay
  cat <<-END > .env
  #ddev-generated
  DB2_INSTANCE=db2inst1
  DB2_EXTERNAL_PORT=50000
  DB2_USER=db
  DB2_PASSWORD=db
  DB2_DATABASE=db
  DB2_HOST=db2
  END

# Advanced usage - yaml files can be read in and then used as go template actions
# in pre_install_actions and post_install_actions
# See example in
# https://github.com/rfay/ddev/blob/20220606_yaml_read_experiment/cmd/ddev/cmd/testdata/TestCmdGetComplex/recipe/install.yaml
yaml_read_files:
